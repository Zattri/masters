dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
dataset = dataset[dataset$areaName == 1,]
iforest = isolationForest$new()
iforest$fit(dataset)
iforest$scores
dataset = dataset[dataset$areaName == 1,]
datasetMatrix = cbind(dataset$date, dataset$newCases)
iforest = isolationForest$new()
iforest$fit(datasetMatrix)
iforest$scores
datasetMatrix = cbind(dataset$stdDate, dataset$newCases)
iforest = isolationForest$new()
iforest$fit(datasetMatrix)
iforest$scores
iforest$fit(datasetMatrix)
plot(dataset$date, dataset$newCases, col=dataset$outlier)
plot(dataset$date, dataset$newCases)
View(dataset)
dataset = dataset[dataset$areaName == 2,]
library("fpc")
library("dbscan")
library("TTR")
library("forecast")
library("solitude")
setwd("../Desktop/masters/data_mining/coursework")
dataset = read.csv("regional_covid_data.csv")
# Removing unnecessary columns and renaming
dataset = subset(dataset, select = -c(areaType, areaCode))
names(dataset)[names(dataset) == "cumCasesBySpecimenDate"] = "cumCases"
names(dataset)[names(dataset) == "newCasesBySpecimenDate"] = "newCases"
names(dataset)[names(dataset) == "cumDeathsByDeathDate"] = "cumDeaths"
names(dataset)[names(dataset) == "newDeathsByDeathDate"] = "newDeaths"
names(dataset)[names(dataset) == "newCasesBySpecimenDateRollingRate"] = "newCasesAvg"
# Rolling rate is a calculated weekly average
# Remove null values
dataset = dataset[rowSums(is.na(dataset)) == 0,]
# Label encode regions as integers, keeping a list of region names
regions = unique(dataset$areaName)
dataset$areaName = as.numeric(factor(dataset$areaName, levels=regions))
# Convert dates to valid date format and select date range
dataset$date = as.Date(dataset$date, "%d/%m/%Y")
dataset = dataset[dataset$date >= as.Date("2020-09-01"),]
dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
iforest = isolationForest$new(sample_size = length(dataset) * 0.5)
iforest$fit(dataset)
iforest$scores
dataset$pred = iforest$predict(dataset)
dataset$outlier = as.factor(ifelse(dataset$pred$anomaly_score >= 0.50, "outlier", "normal"))
plot(dataset$date, dataset$newCases)
plot(dataset$date, dataset$newCases, col=dataset$outlier)
dataset$outlier
View(dataset)
index = sample(ceiling(nrow(dataset) * 0.5)) # Sample half available rows
iforest = isolationForest$new(sample_size = length(index))
iforest$fit(dataset[index, ])
library("fpc")
library("dbscan")
library("TTR")
library("forecast")
library("solitude")
setwd("../Desktop/masters/data_mining/coursework")
dataset = read.csv("regional_covid_data.csv")
# Removing unnecessary columns and renaming
dataset = subset(dataset, select = -c(areaType, areaCode))
names(dataset)[names(dataset) == "cumCasesBySpecimenDate"] = "cumCases"
names(dataset)[names(dataset) == "newCasesBySpecimenDate"] = "newCases"
names(dataset)[names(dataset) == "cumDeathsByDeathDate"] = "cumDeaths"
names(dataset)[names(dataset) == "newDeathsByDeathDate"] = "newDeaths"
names(dataset)[names(dataset) == "newCasesBySpecimenDateRollingRate"] = "newCasesAvg"
# Rolling rate is a calculated weekly average
# Remove null values
dataset = dataset[rowSums(is.na(dataset)) == 0,]
# Label encode regions as integers, keeping a list of region names
regions = unique(dataset$areaName)
dataset$areaName = as.numeric(factor(dataset$areaName, levels=regions))
# Convert dates to valid date format and select date range
dataset$date = as.Date(dataset$date, "%d/%m/%Y")
dataset = dataset[dataset$date >= as.Date("2020-09-01"),]
dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
index = sample(ceiling(nrow(dataset) * 0.5)) # Sample half available rows
iforest = isolationForest$new(sample_size = length(index))
iforest$fit(dataset[index, ])
iforest$predict(dataset[index, ]) # Training data
iforest$predict(dataset[-index, ]) # New data
View(iforest)
library("fpc")
library("dbscan")
library("TTR")
library("forecast")
library("solitude")
setwd("../Desktop/masters/data_mining/coursework")
dataset = read.csv("regional_covid_data.csv")
# Removing unnecessary columns and renaming
dataset = subset(dataset, select = -c(areaType, areaCode))
names(dataset)[names(dataset) == "cumCasesBySpecimenDate"] = "cumCases"
names(dataset)[names(dataset) == "newCasesBySpecimenDate"] = "newCases"
names(dataset)[names(dataset) == "cumDeathsByDeathDate"] = "cumDeaths"
names(dataset)[names(dataset) == "newDeathsByDeathDate"] = "newDeaths"
names(dataset)[names(dataset) == "newCasesBySpecimenDateRollingRate"] = "newCasesAvg"
# Rolling rate is a calculated weekly average
# Remove null values
dataset = dataset[rowSums(is.na(dataset)) == 0,]
# Label encode regions as integers, keeping a list of region names
regions = unique(dataset$areaName)
dataset$areaName = as.numeric(factor(dataset$areaName, levels=regions))
# Convert dates to valid date format and select date range
dataset$date = as.Date(dataset$date, "%d/%m/%Y")
dataset = dataset[dataset$date >= as.Date("2020-09-01"),]
dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
dataset = dataset[dataset, select = -c(date, areaName)]
dataset = subset(dataset, select = -c(date, areaName))
index = sample(ceiling(nrow(dataset) * 0.5)) # Sample half available rows
iforest = isolationForest$new(sample_size = length(index))
iforest$fit(dataset[index, ])
predResults = iforest$predict(dataset[index, ]) # Training data
predResults2 = iforest$predict(dataset[-index, ]) # New data
View(predResults)
View(predResults2)
View(predResults)
dataset$outlier = as.factor(ifelse(predResults$anomaly_score >= 0.60, "outlier", "normal"))
View(predResults)
dataset[index,]$anom_score = iforest$predict(dataset[index, ])$anomaly_score # Training data
dataset[-index,]$anom_score = iforest$predict(dataset[-index, ])$anomaly_score # New data
library("fpc")
library("dbscan")
library("TTR")
library("forecast")
library("solitude")
setwd("../Desktop/masters/data_mining/coursework")
dataset = read.csv("regional_covid_data.csv")
# Removing unnecessary columns and renaming
dataset = subset(dataset, select = -c(areaType, areaCode))
names(dataset)[names(dataset) == "cumCasesBySpecimenDate"] = "cumCases"
names(dataset)[names(dataset) == "newCasesBySpecimenDate"] = "newCases"
names(dataset)[names(dataset) == "cumDeathsByDeathDate"] = "cumDeaths"
names(dataset)[names(dataset) == "newDeathsByDeathDate"] = "newDeaths"
names(dataset)[names(dataset) == "newCasesBySpecimenDateRollingRate"] = "newCasesAvg"
# Rolling rate is a calculated weekly average
# Remove null values
dataset = dataset[rowSums(is.na(dataset)) == 0,]
# Label encode regions as integers, keeping a list of region names
regions = unique(dataset$areaName)
dataset$areaName = as.numeric(factor(dataset$areaName, levels=regions))
# Convert dates to valid date format and select date range
dataset$date = as.Date(dataset$date, "%d/%m/%Y")
dataset = dataset[dataset$date >= as.Date("2020-09-01"),]
dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
dataset = subset(dataset, select = -c(date, areaName))
index = sample(ceiling(nrow(dataset) * 0.5)) # Sample half available rows
iforest = isolationForest$new(sample_size = length(index))
iforest$fit(dataset[index, ])
dataset[index,]$anom_score = iforest$predict(dataset[index, ])$anomaly_score # Training data
iforest$predict(dataset[index, ])$anomaly_score
dataset$anom_score = iforest$predict(dataset[index, ])$anomaly_score
dataset[index,]$anom_score = iforest$predict(dataset[index, ])$anomaly_score
dataset[index,]$anom_score
iforest$predict(dataset[index, ])$anomaly_score
dataset[index,]
str(dataset[index,])
iforest$predict(dataset[index, ])$anomaly_score
dataset[index,]$anom_score = iforest$predict(dataset[index, ])$anomaly_score
str(dataset[index,])
anomalies = iforest$predict(dataset[index, ])$anomaly_score
dataset[index,]$anom_score = anomalies
dataset$anom_score = NULL
dataset[index,]$anom_score = anomalies
dataset$anom_score = 0
dataset[index,]$anom_score = anomalies
dataset[-index,]$anom_score = iforest$predict(dataset[-index, ])$anomaly_score # New data
dataset$outlier = as.factor(ifelse(dataset$anomaly_score >= 0.60, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.60, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.50, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.55, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.65, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.60, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.40, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.70, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.60, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.59, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.595, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.59, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
min(dataset$anom_score)
max(dataset$anom_score)
mean(dataset$anom_score)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
legend("topleft", legend=c("Outlier", "Normal"), col=dataset$outlier)
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
legend("topleft", legend=c("Outlier", "Normal"), col=c(0,1))
legend("topleft", legend=c("Outlier", "Normal"), col=c(0,1))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
legend("topleft", legend=c("Outlier", "Normal"), col=c(0:1))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
legend("topleft", legend=c("Outlier", "Normal"), col=c(0:1), pch=19)
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
legend("topleft", legend=c("Outlier", "Normal"), col=c(1:2), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.7, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
legend("topleft", legend=c("Outlier", "Normal"), col=c(1:2), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.7, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
min(dataset$anom_score)
max(dataset$anom_score)
mean(dataset$anom_score)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier)
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch-19)
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19)
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
northEast = dataset[dataset$areaName == 1,]
northEastTs = rev(ts(northEast$newCases))
library("fpc")
library("dbscan")
library("TTR")
library("forecast")
library("solitude")
setwd("../Desktop/masters/data_mining/coursework")
dataset = read.csv("regional_covid_data.csv")
# Removing unnecessary columns and renaming
dataset = subset(dataset, select = -c(areaType, areaCode))
names(dataset)[names(dataset) == "cumCasesBySpecimenDate"] = "cumCases"
names(dataset)[names(dataset) == "newCasesBySpecimenDate"] = "newCases"
names(dataset)[names(dataset) == "cumDeathsByDeathDate"] = "cumDeaths"
names(dataset)[names(dataset) == "newDeathsByDeathDate"] = "newDeaths"
names(dataset)[names(dataset) == "newCasesBySpecimenDateRollingRate"] = "newCasesAvg"
# Rolling rate is a calculated weekly average
# Remove null values
dataset = dataset[rowSums(is.na(dataset)) == 0,]
# Label encode regions as integers, keeping a list of region names
regions = unique(dataset$areaName)
dataset$areaName = as.numeric(factor(dataset$areaName, levels=regions))
# Convert dates to valid date format and select date range
dataset$date = as.Date(dataset$date, "%d/%m/%Y")
dataset = dataset[dataset$date >= as.Date("2020-09-01"),]
dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
dataset = subset(dataset, select = -c(stdDate, areaName))
# Sampling data and fitting model to sampled data
index = sample(ceiling(nrow(dataset) * 0.5)) # Sample half available rows
iforest = isolationForest$new(sample_size = length(index))
iforest$fit(dataset[index, ])
# Prediction results
iforest$predict(dataset[index, ]) # Training data scores
iforest$predict(dataset[-index, ]) # Test data scores
# Creating anomaly score column and adding scores to dataset
dataset$anom_score = 0
dataset[index,]$anom_score = iforest$predict(dataset[index, ])$anomaly_score # Training data
dataset[-index,]$anom_score = iforest$predict(dataset[-index, ])$anomaly_score # New data
# Plotting outliers chart
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19)
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset = dataset[dataset$date >= as.Date("2020-09-01"),]
dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
dataset = subset(dataset, select = -c(date, areaName))
# Sampling data and fitting model to sampled data
index = sample(ceiling(nrow(dataset) * 0.5)) # Sample half available rows
iforest = isolationForest$new(sample_size = length(index))
iforest$fit(dataset[index, ])
# Prediction results
iforest$predict(dataset[index, ]) # Training data scores
iforest$predict(dataset[-index, ]) # Test data scores
# Creating anomaly score column and adding scores to dataset
dataset$anom_score = 0
dataset[index,]$anom_score = iforest$predict(dataset[index, ])$anomaly_score # Training data
dataset[-index,]$anom_score = iforest$predict(dataset[-index, ])$anomaly_score # New data
# Plotting outliers chart
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19)
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
library("fpc")
library("dbscan")
library("TTR")
library("forecast")
library("solitude")
setwd("../Desktop/masters/data_mining/coursework")
dataset = read.csv("regional_covid_data.csv")
# Removing unnecessary columns and renaming
dataset = subset(dataset, select = -c(areaType, areaCode))
names(dataset)[names(dataset) == "cumCasesBySpecimenDate"] = "cumCases"
names(dataset)[names(dataset) == "newCasesBySpecimenDate"] = "newCases"
names(dataset)[names(dataset) == "cumDeathsByDeathDate"] = "cumDeaths"
names(dataset)[names(dataset) == "newDeathsByDeathDate"] = "newDeaths"
names(dataset)[names(dataset) == "newCasesBySpecimenDateRollingRate"] = "newCasesAvg"
# Rolling rate is a calculated weekly average
# Remove null values
dataset = dataset[rowSums(is.na(dataset)) == 0,]
# Label encode regions as integers, keeping a list of region names
regions = unique(dataset$areaName)
dataset$areaName = as.numeric(factor(dataset$areaName, levels=regions))
# Convert dates to valid date format and select date range
dataset$date = as.Date(dataset$date, "%d/%m/%Y")
dataset = dataset[dataset$date >= as.Date("2020-09-01"),]
dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
dataset = subset(dataset, select = -c(date, areaName))
# Sampling data and fitting model to sampled data
index = sample(ceiling(nrow(dataset) * 0.5)) # Sample half available rows
iforest = isolationForest$new(sample_size = length(index))
iforest$fit(dataset[index, ])
# Prediction results
iforest$predict(dataset[index, ]) # Training data scores
iforest$predict(dataset[-index, ]) # Test data scores
# Creating anomaly score column and adding scores to dataset
dataset$anom_score = 0
dataset[index,]$anom_score = iforest$predict(dataset[index, ])$anomaly_score # Training data
dataset[-index,]$anom_score = iforest$predict(dataset[-index, ])$anomaly_score # New data
# Plotting outliers chart
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19)
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Isolation Forest Anomaly Detection, Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= 0.593, "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
min(dataset$anom_score)
max(dataset$anom_score)
mean(dataset$anom_score)
dataset$outlier = as.factor(ifelse(dataset$anom_score >= mean(dataset$anom_score), "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
library("fpc")
library("dbscan")
library("TTR")
library("forecast")
library("solitude")
setwd("../Desktop/masters/data_mining/coursework")
dataset = read.csv("regional_covid_data.csv")
# Removing unnecessary columns and renaming
dataset = subset(dataset, select = -c(areaType, areaCode))
names(dataset)[names(dataset) == "cumCasesBySpecimenDate"] = "cumCases"
names(dataset)[names(dataset) == "newCasesBySpecimenDate"] = "newCases"
names(dataset)[names(dataset) == "cumDeathsByDeathDate"] = "cumDeaths"
names(dataset)[names(dataset) == "newDeathsByDeathDate"] = "newDeaths"
names(dataset)[names(dataset) == "newCasesBySpecimenDateRollingRate"] = "newCasesAvg"
# Rolling rate is a calculated weekly average
# Remove null values
dataset = dataset[rowSums(is.na(dataset)) == 0,]
# Label encode regions as integers, keeping a list of region names
regions = unique(dataset$areaName)
dataset$areaName = as.numeric(factor(dataset$areaName, levels=regions))
# Convert dates to valid date format and select date range
dataset$date = as.Date(dataset$date, "%d/%m/%Y")
dataset = dataset[dataset$date >= as.Date("2020-09-01"),]
dataset$date = as.numeric(dataset$date - min(dataset$date, na.rm = TRUE))
dataset$stdDate = dataset$date - min(dataset$date, na.rm = TRUE)
dataset$stdDate = dataset$date / max(dataset$date, na.rm = TRUE)
forestDataset = subset(dataset, select = -c(date, areaName))
# Sampling data and fitting model to sampled data
index = sample(ceiling(nrow(forestDataset) * 0.5)) # Sample half available rows
iforest = isolationForest$new(sample_size = length(index))
iforest$fit(forestDataset[index, ])
# Prediction results
iforest$predict(forestDataset[index, ]) # Training data scores
iforest$predict(forestDataset[-index, ]) # Test data scores
# Creating anomaly score column and adding scores to dataset
dataset$anom_score = 0
dataset[index,]$anom_score = iforest$predict(forestDataset[index, ])$anomaly_score # Training data
dataset[-index,]$anom_score = iforest$predict(forestDataset[-index, ])$anomaly_score # New data
# Plotting outliers chart
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), "outlier", "normal"))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
plot(dataset$date, dataset$newDeaths, col=dataset$areaName, xlab="Date", ylab="Deaths per 100k", pch=dataset$outlier)
legend("topleft", legend=regions, col=c(1:9), pch=19)
legend("topright", legend=c("Outlier", "Normal"), col=1, pch=c(2:1))
plot(dataset$date, dataset$newDeaths, col=dataset$areaName, xlab="Date", ylab="Deaths per 100k", pch=dataset$outlier)
legend("topleft", legend=regions, col=c(1:9), pch=19)
legend("topright", legend=c("Outlier", "Normal"), col=1, pch=dataset$outlier)
plot(dataset$date, dataset$newDeaths, col=dataset$areaName, xlab="Date", ylab="Deaths per 100k", pch=dataset$outlier = "Outlier")
legend("topleft", legend=regions, col=c(1:9), pch=19)
legend("topright", legend=c("Outlier", "Normal"), col=1, pch=dataset$outlier)
plot(dataset$date, dataset$newDeaths, col=dataset$areaName, xlab="Date", ylab="Deaths per 100k", pch=dataset$outlier == "Outlier")
legend("topleft", legend=regions, col=c(1:9), pch=19)
legend("topright", legend=c("Outlier", "Normal"), col=1, pch=dataset$outlier)
plot(dataset$date, dataset$newDeaths, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k", pch=dataset$areaName)
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), 1, 0))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
plot(dataset$date, dataset$newDeaths, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k", pch=dataset$areaName)
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
plot(dataset$date, dataset$newDeaths, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k", pch=dataset$areaName)
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
legend("topright", legend=c("Outlier", "Normal"), col=1, pch=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), 2, 1))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
# Plotting outliers for each region
plot(dataset$date, dataset$newDeaths, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k", pch=dataset$areaName)
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=1, pch=dataset$outlier)
plot(dataset$date, dataset$newDeaths, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k", pch=dataset$areaName)
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=1, pch=dataset$outlier)
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), 2, 1))
plot(dataset$stdDate, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
plot(dataset$date, dataset$newDeaths, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k", pch=dataset$areaName)
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=2, pch=dataset$outlier)
plot(dataset$date, dataset$newDeaths, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k", pch=dataset$areaName)
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=2, pch=c(2:1))
plot(dataset$date, dataset$newDeaths, pch=dataset$outlier, col=dataset$areaName, xlab="Date", ylab="Deaths per 100k")
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=2, pch=c(2:1))
plot(dataset$date, dataset$newDeaths, pch=(dataset$outlier == 2), col=dataset$areaName, xlab="Date", ylab="Deaths per 100k")
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=2, pch=c(2:1))
plot(dataset$date, dataset$newDeaths, pch=dataset$areaName, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k")
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=2, pch=c(2:1))
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), 2, 1))
plot(dataset$date, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), 2, 1))
plot(dataset$date, dataset$newCases, col=1, pch=dataset$outlier, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), "Outlier", "Normal"))
plot(dataset$date, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
plot(dataset$date, dataset$newDeaths, pch=dataset$areaName, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k")
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=2, pch=c(2:1))
plot(dataset$date, dataset$newDeaths, pch=dataset$areaName, col=dataset$outlier, xlab="Date", ylab="Deaths per 100k")
legend("topleft", legend=regions, col=1, pch=c(1:9))
legend("topright", legend=c("Outlier", "Normal"), col=(2:1), pch=19)
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), "Outlier", "Normal"))
plot(dataset$date, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
count(dataset$outlier)
sum(dataset$outlier == "outlier")
sum(dataset$outlier == "Outlier")
sum(dataset$outlier == "Normal")
plot(dataset$date, dataset$newCasesAvg, col=dataset$areaName, xlab="Date", ylab="Average Cases per 100K", pch=19,
main="COVID-19, Average new cases per week")
legend("topleft", legend=regions, col=c(1:9), pch=19)
plot(dataset$date, dataset$newCases, col=dataset$areaName, xlab="Date", ylab="New Cases", pch=19,
main="COVID-19, New cases per day")
legend("topleft", legend=regions, col=c(1:9), pch=19)
plot(dataset$date, dataset$newCases, col=dataset$areaName, xlab="Date", ylab="New Cases", pch=19,
main="COVID-19, New cases per day")
legend("topleft", legend=regions, col=c(1:9), pch=19)
plot(dataset$date, dataset$newCases, col=dataset$areaName, xlab="Date", ylab="New Cases", pch=19,
main="COVID-19, New cases per day")
legend("topleft", legend=regions, col=c(1:9), pch=19)
min(dataset$anom_score)
max(dataset$anom_score)
mean(dataset$anom_score)
sum(dataset$outlier == "Outlier")
sum(dataset$outlier == "Normal")
# Plotting outliers chart
dataset$outlier = as.factor(ifelse(dataset$anom_score > mean(dataset$anom_score), "Outlier", "Normal"))
plot(dataset$date, dataset$newCases, col=dataset$outlier, pch=19, xlab="Date", ylab="New Cases Per 100K (Daily)", main="Anomaly Detection in Regional Case Data since Sept")
legend("topleft", legend=c("Outlier", "Normal"), col=c(2:1), pch=19)
min(dataset$anom_score)
max(dataset$anom_score)
mean(dataset$anom_score)
sum(dataset$outlier == "Outlier")
sum(dataset$outlier == "Normal")
plot(dataset$date, dataset$newCases, col=dataset$areaName, xlab="Date", ylab="New Cases", pch=19,
main="COVID-19, New cases per day")
legend("topleft", legend=regions, col=c(1:9), pch=19)
regions
regions = c("North East", "North West", "Yorkshire...", "East Midlands", "West Midlands", "East of England", "London", "South East", "South West")
plot(dataset$date, dataset$newCases, col=dataset$areaName, xlab="Date", ylab="New Cases", pch=19,
main="COVID-19, New cases per day")
legend("topleft", legend=regions, col=c(1:9), pch=19)
